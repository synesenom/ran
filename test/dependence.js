import { assert } from 'chai'
import { describe, it } from 'mocha'
import { equal } from './test-utils'
import * as dependence from '../src/dependence'

describe('dependence', () => {
  describe('.covariance()', () => {
    it('should return undefined if any of the arrays has fewer than two elements', () => {
      assert(typeof dependence.covariance([], [1, 2, 3]) === 'undefined')
      assert(typeof dependence.covariance([1], [1, 2, 3]) === 'undefined')
      assert(typeof dependence.covariance([1, 2, 3], []) === 'undefined')
      assert(typeof dependence.covariance([1, 2, 3], [1]) === 'undefined')
    })

    it('should return undefined if arrays have different length', () => {
      assert(typeof dependence.covariance([1, 2, 3], [4, 5]) === 'undefined')
    })

    it('should return the covariance of two arrays', () => {
      const x = [
        19, 37, 31, 38, 38, 39, 49, 0, 9, 11, 6, 9, 31, 45, 37, 12, 38, 2, 16, 27, 2, 16, 21, 26, 29, 15, 27, 1, 29, 27,
        29, 25, 37, 3, 17, 41, 36, 47, 0, 9, 35, 2, 27, 35, 33, 31, 19, 45, 10, 17, 20, 18, 0, 6, 26, 8, 43, 48, 10, 20,
        36, 36, 30, 23, 23, 45, 4, 4, 34, 8, 3, 23, 26, 23, 19, 7, 37, 43, 10, 46, 18, 19, 7, 32, 26, 2, 44, 38, 21, 26,
        3, 26, 35, 29, 2, 48, 6, 38, 1, 27
      ]
      const y = [
        29.641223728, 36.3741903191, 23.0772147617, 47.87346147, 52.6542598467, 57.7680204452, 49.6568523969,
        -5.96838751181, 3.41524599557, 17.4695207933, 7.95980431604, 9.40816208931, 16.3223464194, 52.8311954953,
        32.7936726542, 18.0891216573, 40.9705317488, -1.87099795043, 8.71261799584, 40.7811517089, -3.93345599851,
        25.2503555439, 12.6182615757, 27.4771622098, 28.6079013704, 25.8582582148, 46.0379336813, -29.3651244547,
        33.8690472253, 9.92406344266, 28.7155296668, 13.8864777515, 46.5346091251, 2.44013225028, 27.6753111235,
        32.4564117353, 43.1988767134, 46.0201773988, 9.74491972249, -1.05889606634, 27.7497526168, -1.87348803431,
        16.9127097255, 25.4239396216, 26.5553111083, 31.1682839228, 5.4682881146, 52.788029012, 18.1585457902,
        18.4581931548, 5.17096477919, 18.694186917, -18.8757119953, 10.6862853546, 24.1578078061, 2.12859095568,
        54.079230909, 50.1076942691, 5.94297398927, 26.3131263197, 35.834298539, 49.5233392021, 18.3987075225,
        39.0698121228, 31.9723955066, 47.7921915345, -0.582870896532, 0.0545741151161, 27.7568855845, 17.6582258381,
        15.9422738957, 29.0183889962, 20.9784154653, 19.823759716, 21.8404528246, -2.43054052147, 32.9884010458,
        50.3349197956, -2.68050364442, 54.0695659005, 16.222885066, 10.9979787565, 25.4800341699, 41.8518332697,
        16.9340148713, -1.16323191094, 56.1079659859, 53.4282838634, 12.3089758948, 28.6397139583, 4.7860315868,
        38.8844731226, 20.1815896825, 14.7361716832, 3.30405464947, 46.9223081836, -4.31084985771, 29.175292425,
        6.50624080152, 45.6088094234
      ]
      const covariance = 230.118283877
      assert(equal(dependence.covariance(x, y), covariance))
    })
  })

  describe('.dCov()', () => {
    it('should return undefined if any array is empty', () => {
      assert(typeof dependence.dCov([], [1, 2, 3]) === 'undefined')
      assert(typeof dependence.dCov([1, 2, 3], []) === 'undefined')
    })

    it('should return the distance covariance of two arrays', () => {
      const x = [
        3, 34, 22, 46, 22, 4, 9, 22, 31, 9, 8, 1, 0, 11, 8, 49, 40, 44, 38, 22, 34, 45, 0, 2, 30, 41, 41, 6, 15, 41,
        12, 17, 18, 19, 3, 42, 31, 31, 25, 1, 0, 41, 46, 24, 28, 37, 2, 4, 45, 36, 15, 49, 23, 20, 0, 40, 38, 36, 19,
        7, 31, 29, 44, 16, 24, 33, 40, 17, 46, 11, 47, 32, 39, 49, 16, 28, 4, 1, 27, 23, 16, 39, 2, 8, 10, 38, 13, 0,
        34, 11, 40, 37, 34, 11, 35, 22, 5, 42, 25, 12
      ]
      const y = [
        18, 43, 15, 45, 21, 15, 24, 31, 21, 10, 3, 0, 10, 8, -9, 56, 48, 67, 34, 1, 25, 46, 11, 5, 45, 53, 25, 10, 0,
        35, 27, 25, 16, 26, 14, 55, 8, 38, 24, -3, -3, 31, 32, 32, 2, 48, -8, -1, 48, 59, -3, 45, 31, 5, -8, 38, 17,
        43, 21, 2, 45, 28, 39, 13, 19, 30, 28, 24, 32, 15, 29, 32, 32, 52, 18, 31, 18, -17, 16, 14, 37, 38, 6, 2, 24,
        37, 18, 4, 23, 20, 39, 32, 46, -4, 40, 28, 0, 30, 20, 4
      ]
      const dCov = 9.212925676461312
      assert(equal(dependence.dCov(x, y), dCov))
    })
  })

  describe('.dCor()', () => {
    it('should return undefined if any array is empty', () => {
      assert(typeof dependence.dCor([], [1, 2, 3]) === 'undefined')
      assert(typeof dependence.dCor([1, 2, 3], []) === 'undefined')
    })

    it('should return the distance correlation of two arrays', () => {
      const x = [
        25, 2, 12, 18, 26, 3, 7, 31, 35, 30, 24, 7, 3, 48, 10, 9, 44, 44, 11, 38, 4, 19, 43, 11, 11, 14, 21, 40, 29, 32,
        48, 49, 12, 43, 27, 42, 17, 2, 25, 5, 25, 32, 23, 35, 25, 15, 22, 15, 31, 32, 5, 6, 37, 45, 31, 40, 20, 0, 42,
        29, 48, 47, 36, 46, 44, 8, 2, 40, 34, 31, 19, 17, 13, 42, 28, 7, 48, 17, 7, 17, 41, 29, 21, 34, 29, 1, 41, 26,
        23, 4, 20, 23, 48, 36, 21, 33, 33, 13, 24, 43
      ]
      const y = [
        15, -2, 17, 18, 26, 23, 3, 30, 29, 26, 33, 5, -16, 51, 5, 16, 53, 47, 12, 43, 10, 24, 43, 10, 13, 18, 20, 46,
        33, 41, 49, 55, -1, 38, 29, 45, 22, -1, 29, 0, 42, 32, 31, 40, 13, 21, 22, 17, 37, 40, 10, 0, 48, 39, 22, 44,
        38, 5, 40, 26, 68, 71, 32, 57, 34, 24, 5, 38, 33, 33, 12, 29, 24, 47, 12, 0, 56, 10, 6, 23, 35, 43, 28, 27, 16,
        -6, 41, 26, 9, -8, 11, 17, 61, 40, 24, 52, 38, 18, 33, 36
      ]
      const dCor = 0.8679753723517001
      assert(equal(dependence.dCor(x, y), dCor))
    })
  })

  describe('.kendall()', () => {
    it('should return undefined if any array is empty', () => {
      assert(typeof dependence.kendall([], [1, 2, 3]) === 'undefined')
      assert(typeof dependence.kendall([1, 2, 3], []) === 'undefined')
    })

    it('should return undefined if arrays have different length', () => {
      assert(typeof dependence.kendall([1, 2, 3], [4, 5]) === 'undefined')
    })

    it(`should return Kendall's tau of two arrays`, () => {
      const x = [
        30, 18, 24, 48, 33, 38, 48, 1, 12, 5, 7, 3, 8, 32, 28, 15, 32, 12, 37, 13, 26, 1, 6, 41, 1, 31, 11, 33, 19, 31,
        12, 19, 25, 45, 34, 37, 37, 26, 1, 39, 42, 34, 0, 21, 20, 34, 38, 25, 34, 49, 0, 17, 28, 37, 49, 24, 18, 19, 23,
        23, 11, 18, 45, 31, 4, 38, 32, 33, 46, 32, 9, 2, 13, 43, 23, 7, 28, 34, 41, 42, 20, 35, 17, 40, 0, 26, 35, 23,
        35, 29, 10, 30, 1, 1, 5, 19, 39, 20, 39, 19
      ]
      const y = [
        44, 14, 42, 49, 51, 36, 32, 3, 0, 14, 23, 5, -2, 28, 50, 3, 28, -14, 42, 16, 37, 13, 10, 27, -6, 38, 29, 30, 26,
        44, 4, 18, 28, 24, 31, 34, 38, 32, 2, 34, 40, 41, 1, 36, 33, 43, 40, 32, 32, 58, 0, 18, 27, 40, 65, 30, 20, 17,
        31, 20, 17, 10, 34, 26, 28, 44, 20, 46, 32, 22, -2, 4, 14, 50, 29, 16, 32, 41, 43, 47, 26, 33, 5, 33, -10, 14,
        35, 21, 21, 30, 12, 43, 16, 24, 26, 5, 50, 16, 34, 8
      ]
      const kendall = 0.59839502219923779
      assert(equal(dependence.kendall(x, y), kendall))
    })
  })

  describe('.kullbackLeibler()', () => {
    it('should return undefined if any array is empty', () => {
      assert(typeof dependence.kullbackLeibler([], [0.1, 0.2, 0.7]) === 'undefined')
      assert(typeof dependence.kullbackLeibler([0.1, 0.2, 0.7], []) === 'undefined')
    })

    it('should return undefined if arrays have different length', () => {
      assert(typeof dependence.kullbackLeibler([0.1, 0.2, 0.7], [0.3, 0.7]) === 'undefined')
    })

    it('should return undefined if Q(x) = 0 and P(x) > 0 for some x', () => {
      assert(typeof dependence.kullbackLeibler([0.1, 0.2, 0.7], [0, 0.3, 0.7]) === 'undefined')
    })

    it('should return the Kullback-Leibler divergence of two arrays of probabilities', () => {
      const p = [
        7.69459862671e-23, 1.02797735717e-18, 5.05227108354e-15, 9.13472040836e-12, 6.07588284982e-09,
        1.48671951473e-06, 0.000133830225765, 0.00443184841194, 0.0539909665132, 0.241970724519, 0.398942280401,
        0.241970724519, 0.0539909665132, 0.00443184841194, 0.000133830225765, 1.48671951473e-06, 6.07588284982e-09,
        9.13472040836e-12, 5.05227108354e-15, 1.02797735717e-18, 7.69459862671e-23, 2.11881925351e-27,
        2.14638373566e-32, 7.99882775701e-38, 1.09660655939e-43, 5.53070954984e-50, 1.02616307279e-56,
        7.00418213432e-64, 1.7587495426e-71, 1.62463603677e-79
      ]
      const q = [
        0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333,
        0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333,
        0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333,
        0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333,
        0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333, 0.0333333333333
      ]
      const dPQ = 1.98225894872
      const dQP = 45.1010744902
      assert(equal(dependence.kullbackLeibler(p, q), dPQ, 8))
      assert(equal(dependence.kullbackLeibler(q, p), dQP, 8))
    })
  })

  describe('.oddsRatio()', () => {
    it('should return undefined if any of p01 and p10 is zero', () => {
      assert(typeof dependence.oddsRatio(0.1, 0, 0.3, 0.4) === 'undefined')
      assert(typeof dependence.oddsRatio(0.1, 0.2, 0, 0.4) === 'undefined')
    })

    it('should return the odds ratio for contingency table of joint probabilities', () => {
      const p00 = 0.01 + 0.99 * Math.random()
      const p01 = 0.01 + 0.99 * Math.random()
      const p10 = 0.01 + 0.99 * Math.random()
      const p11 = 0.01 + 0.99 * Math.random()
      assert(equal(dependence.oddsRatio(p00, p01, p10, p11), p00 * p11 / (p01 * p10)))
    })
  })

  describe('.pearson()', () => {
    it('should return undefined if any array is empty', () => {
      assert(typeof dependence.pearson([], [1, 2, 3]) === 'undefined')
      assert(typeof dependence.pearson([1, 2, 3], []) === 'undefined')
    })

    it('should return undefined if arrays have different length', () => {
      assert(typeof dependence.pearson([1, 2, 3], [4, 5]) === 'undefined')
    })

    it('should return the Pearson correlation of two arrays', () => {
      const x = [
        46, 38, 22, 4, 21, 5, 7, 39, 12, 39, 45, 17, 28, 41, 47, 2, 21, 40, 45, 7, 7, 2, 40, 11, 17, 19, 6, 21, 18, 17,
        18, 28, 7, 9, 10, 21, 5, 37, 15, 11, 43, 35, 45, 17, 31, 4, 40, 25, 28, 11, 27, 11, 0, 4, 10, 17, 30, 17, 43,
        40, 6, 47, 33, 15, 1, 37, 35, 46, 38, 2, 6, 28, 6, 43, 14, 3, 17, 49, 28, 27, 20, 14, 11, 40, 18, 37, 43, 27,
        16, 30, 19, 18, 17, 25, 27, 39, 42, 3, 33, 18
      ]
      const y = [
        36.832356648, 33.8947899026, 24.570992213, 0.951252776947, 28.8801451633, 8.78328072989, 13.3198716516,
        32.8804461581, 7.70815554381, 30.6022307896, 35.3938303801, 16.1479098742, 28.5563895506, 31.9903651724,
        44.6700576631, 3.68478403098, 25.0276754092, 53.4022693309, 42.75447543, 21.5480247821, -2.23119730452,
        -5.55847643401, 33.1478923838, -1.86043246506, 22.230831576, 3.42680362107, 5.86004969921, 28.6632874651,
        15.7735351245, 26.8286956447, 33.1514890847, 54.3167193629, -9.18376144847, 2.53609144882, 2.65948486775,
        12.2594041526, 18.9427822765, 35.7081152242, 19.6344415946, 0.421257576256, 46.876192245, 39.2387947214,
        39.8680444925, 15.5703059484, 39.5941811535, 8.6408051583, 34.2674695277, 38.3890809723, 44.539776051,
        7.07917306498, 52.3947670826, 6.62618712393, 6.57018381326, -13.5381455587, 15.1249241717, 18.8546616285,
        36.9740755263, 5.62662347058, 40.7687467513, 45.6806251142, 2.2175037654, 45.3441586192, 35.41664804,
        17.2969619949, -7.99782832868, 28.9742319918, 38.0144356616, 51.033408035, 48.4996906902, -17.7499965423,
        8.14296516073, 36.9371365637, 4.34699609066, 39.5892402268, 30.9661162085, 11.4508658037, 23.7957611293,
        74.1432593289, 32.475311307, 26.2425282652, 38.4427803909, 13.657574059, 18.6613075743, 42.8440398169,
        29.2984588662, 46.3476609998, 43.8778609003, 25.8470542126, -0.983868787379, 37.2534590428, 12.1029542462,
        18.9244592914, 17.0463462178, 20.6894785024, 39.8000437118, 20.5165656093, 23.3993594261, 17.3311015928,
        46.2038085366, 25.988586151
      ]
      const pearson = 0.83149890691945472
      assert(equal(dependence.pearson(x, y), pearson))
    })
  })

  describe('.pointBiserial()', () => {
    it('should return undefined if any array is empty', () => {
      assert(typeof dependence.pointBiserial([], [1, 2, 3]) === 'undefined')
      assert(typeof dependence.pointBiserial([1, 2, 3], []) === 'undefined')
    })

    it('should return undefined if arrays have different length', () => {
      assert(typeof dependence.pointBiserial([1, 2, 3], [0, 1]) === 'undefined')
    })

    it('should return undefined if standard deviation of x is 0', () => {
      assert(typeof dependence.pointBiserial([1, 1, 1], [0, 0, 1]) === 'undefined')
    })

    it('should return the point-biserial correlation of two arrays', () => {
      const x = [
        38, 40, 15, 28, 31, 33, 39, 27, 24, 8, 29, 5, 34, 17, 42, 45, 35, 16, 27, 28, 4, 48, 22, 3, 14, 46, 45, 44, 43,
        35, 13, 14, 32, 33, 8, 30, 11, 43, 37, 41, 15, 13, 10, 17, 20, 5, 22, 11, 44, 31, 36, 24, 43, 44, 20, 3, 40, 42,
        16, 49, 12, 41, 8, 31, 26, 41, 7, 8, 5, 16, 24, 43, 34, 29, 41, 4, 16, 19, 49, 7, 3, 25, 39, 5, 4, 48, 49, 13,
        45, 11, 26, 26, 19, 31, 15, 6, 31, 48, 8, 35
      ]
      const y = [
        0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0,
        1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,
        0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0
      ]
      const pointBiserial = 0.11845990445247673
      assert(equal(dependence.pointBiserial(x, y), pointBiserial))
    })
  })

  describe('.somersD()', () => {
    it('should return undefined if any of the samples is empty', () => {
      assert(typeof dependence.somersD([], [1, 2, 3]) === 'undefined')
    })

    it('should return undefined if samples have different sizes', () => {
      assert(typeof dependence.somersD([1, 2, 3], [1, 2, 3, 4]) === 'undefined')
    })

    it(`should return Somers' D`, () => {
      const x = [
        14, 24, 45, 13, 2, 38, 0, 27, 32, 34, 39, 3, 34, 17, 34, 38, 8, 24, 6, 35, 16, 35, 11, 25, 7, 10, 35, 14, 17,
        35, 7, 46, 10, 10, 13, 19, 45, 23, 26, 38, 17, 4, 6, 29, 30, 32, 26, 6, 31, 28, 43, 6, 15, 49, 2, 48, 40, 45, 0,
        41, 47, 8, 49, 1, 34, 29, 29, 37, 37, 38, 17, 46, 44, 17, 0, 39, 38, 35, 39, 2, 1, 47, 1, 8, 12, 41, 15, 0, 35,
        22, 37, 27, 4, 46, 38, 0, 44, 29, 24, 31
      ]
      const y = [
        6, 35, 38, 13, -4, 73, -1, 42, 23, 43, 38, -7, 27, 0, 41, 41, 13, 11, 22, 37, 13, 33, 12, 19, 2, 23, 24, 29, 21,
        30, 10, 31, -2, 10, 2, 24, 58, 38, 12, 27, 14, -1, 7, 39, 9, 37, 19, 0, 25, 7, 37, 0, 23, 39, 0, 69, 44, 58, -6,
        30, 63, 18, 64, 16, 46, 34, 34, 37, 49, 25, 17, 40, 25, 12, -11, 37, 46, 37, 28, 12, 18, 25, 7, 16, 20, 37, 25,
        5, 34, 12, 19, 22, 10, 37, 44, 6, 51, 22, 29, 46
      ]
      const somersD = 0.626187525816
      assert(equal(dependence.somersD(x, y), somersD))
    })
  })

  describe('.spearman()', () => {
    it('should return undefined if any array is empty', () => {
      assert(typeof dependence.spearman([], [1, 2, 3]) === 'undefined')
      assert(typeof dependence.spearman([1, 2, 3], []) === 'undefined')
    })

    it('should return undefined if arrays have different length', () => {
      assert(typeof dependence.spearman([1, 2, 3], [4, 5]) === 'undefined')
    })

    it(`should return Spearman's rank correlation of two arrays`, () => {
      const x = [30, 7, 20, 27, 3, 2, 32, 46, 45, 35, 14, 0, 34, 22, 37, 22, 5, 23, 19, 39, 15, 17, 10, 23, 10, 27, 9,
        37, 19, 46, 11, 22, 28, 21, 44, 31, 8, 21, 8, 26, 6, 6, 33, 4, 1, 12, 25, 19, 42, 2, 29, 33, 41, 49, 25, 43, 24,
        1, 5, 17, 32, 42, 29, 26, 48, 10, 31, 41, 1, 19, 24, 10, 26, 21, 44, 9, 26, 24, 49, 47, 17, 9, 32, 33, 25, 4,
        13, 3, 10, 16, 12, 36, 25, 1, 33, 8, 45, 3, 2, 27
      ]
      const y = [50.8298922561, 27.3444276903, -2.45940944922, 21.0711113696, 11.6212263747, -3.7377245505,
        28.5215577521, 37.349432572, 40.2781323021, 50.4511005116, 16.048419129, -6.9189946993, 37.460908483,
        17.33712631, 28.434956608, 28.4885161681, -0.983932571728, 17.5260317571, 24.590228258, 56.6554882872,
        11.3179471732, 27.4786552756, 13.8966671566, 6.55722829361, 5.38639107109, 39.5542527427, 9.24580176785,
        37.0513807468, 13.8047938721, 48.3565776512, 12.8062373248, 29.2148079413, 26.3415807938, 23.1644005006,
        48.0389788887, 36.2317019197, 8.6680240843, 20.3250117326, 4.63722715617, 40.2251073609, -1.50107854771,
        19.5602187541, 18.3575141664, 6.89040074315, -4.66593500348, 6.25962858093, 3.23647995619, 23.2447800103,
        62.4828899137, 5.30290188749, 24.9302169921, 35.6076446335, 54.0258243958, 47.3659026602, 25.2468572117,
        36.0094454725, 24.8631177427, -4.91647917853, -10.3393871459, 4.66079891396, 38.2278916345, 65.0924827869,
        24.8462547258, 18.543305994, 62.5879483724, 17.1711949032, 39.2183585197, 40.7935382473, 7.98045045284,
        15.0808139921, 36.4493093409, 14.822687214, 21.5544333351, 30.7643322402, 35.8180258041, 2.02208960481,
        8.67932384242, 19.9374617881, 49.6588158634, 33.8954139479, 24.180657315, 12.0695056871, 24.7946863708,
        36.6286208621, 15.2307157534, -7.10969852291, 4.21754505478, 7.0405869353, 9.74144937792, -4.19702256425,
        10.6523010328, 48.4384925893, 12.0968623412, 10.6206898351, 49.7619994944, 25.6531836083, 37.115764526,
        12.7279797363, -7.49966399967, 21.8226617586
      ]
      const spearman = 0.83504820055660411
      assert(equal(dependence.spearman(x, y), spearman))
    })
  })

  describe('.yuleQ()', () => {
    it('should return undefined if any of p01 and p10 is zero', () => {
      assert(typeof dependence.yuleQ(0.1, 0, 0.3, 0.4) === 'undefined')
      assert(typeof dependence.yuleQ(0.1, 0.2, 0, 0.4) === 'undefined')
    })

    it(`should return Yule's Q for a contingency table of joint probabilities`, () => {
      const p00 = 0.01 + 0.99 * Math.random()
      const p01 = 0.01 + 0.99 * Math.random()
      const p10 = 0.01 + 0.99 * Math.random()
      const p11 = 0.01 + 0.99 * Math.random()
      assert(equal(dependence.yuleQ(p00, p01, p10, p11),
        (p00 * p11 - p01 * p10) / (p00 * p11 + p01 * p10)))
    })
  })

  describe('.yuleY()', () => {
    it('should return undefined if any of p01 and p10 is zero', () => {
      assert(typeof dependence.yuleY(0.1, 0, 0.3, 0.4) === 'undefined')
      assert(typeof dependence.yuleY(0.1, 0.2, 0, 0.4) === 'undefined')
    })

    it('should return Yule\'s Y for a contingency table of joint probabilities', () => {
      const p00 = 0.01 + 0.99 * Math.random()
      const p01 = 0.01 + 0.99 * Math.random()
      const p10 = 0.01 + 0.99 * Math.random()
      const p11 = 0.01 + 0.99 * Math.random()
      assert(equal(dependence.yuleY(p00, p01, p10, p11),
        (Math.sqrt(p00 * p11) - Math.sqrt(p01 * p10)) / (Math.sqrt(p00 * p11) + Math.sqrt(p01 * p10))))
    })
  })
})
