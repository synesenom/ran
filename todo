# add source of implementations
- wikipedia
- boost library
- numerical recipes
- intermediate probability book


# most important
- add method references in docs
- improve special function precision
- transformation functions to shift/scale generators


# dist
- ARGUS                                 https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.argus.html
                                        https://en.wikipedia.org/wiki/ARGUS_distribution
- beta geometric                        gen, pmf, cdf: https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/bgepdf.htm
- Beta negative binomial                gen: negative-binomial + beta
                                        pmf: https://en.wikipedia.org/wiki/Beta_negative_binomial_distribution
                                        cdf: https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/bnbcdf.htm
- Champernowne                          https://en.wikipedia.org/wiki/Champernowne_distribution
- crystal ball
- Davis                                 https://en.wikipedia.org/wiki/Davis_distribution
- discrete Laplacian                    scipy
- double exponential
- Error / exponential power
- Exponentially modified Gaussian
- exponentiated weibull
- extended negative binomial            https://en.wikipedia.org/wiki/Extended_negative_binomial_distribution
- Gauss hypergeometric                  scipy
- generalized beta-prime
- generalized half-logistic             scipy
- K-prime                               https://arxiv.org/pdf/1003.4890v1.pdf
- K-square                              https://arxiv.org/pdf/1003.4890v1.pdf
- inverse hypergeometric                https://www.vosesoftware.com/riskwiki/InverseHypergeometricdistribution.php
- lambda-prime                          https://arxiv.org/pdf/1003.4890v1.pdf
- Landau distribution                   https://en.wikipedia.org/wiki/Landau_distribution
- Luria-Delbruck                        https://arxiv.org/pdf/1203.3422.pdf
- non-central eta                       r sadist
- Normal-exponential-gamma              compound
- Normal inverse Gauss                  scipy
- Normal product                        http://mathworld.wolfram.com/NormalProductDistribution.html
- parabolic fractal                     https://en.wikipedia.org/wiki/Parabolic_fractal_distribution
- Planck                                CDF unknown
- power-lognormal                       scipy
- stable
- truncated exponential                 scipy
- truncated normal
- Waring                                https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/bgepdf.htm
- Yule                                  https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/yulpdf.htm

- list: https://rdrr.io/cran/sadists/f/inst/doc/sadists.pdf
- list: https://chaospy.readthedocs.io/en/development/distributions/collection.html
- list: https://docs.scipy.org/doc/scipy-0.13.0/reference/tutorial/stats/continuous.html
- ref: http://www.nrbook.com/devroye/Devroye_files/chapter_ten.pdf
- v2: use standard form + location and scale parameters (https://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm#FORMULAS)
- https://eris62.eu/telechargements/1999Lecoutre-TwousefuldistributionsforBayesianpredictiveproceduresundernormalmodels.pdf


# statistical tests
- normality tests
- anova (group variance)
- analysis of similarities (group variance)
- anderson-darling (distribution)
- breusch-pagan (heteroscedasticity)
- brown-forsythe (group variance)
- cramer-von mises (distribution)
- wald (hypothesis test)
- welch (equal mean)
- wilcoxon (hypothesis test)
- shapiro-wilk (normality)
- levene's test
- list: https://docs.scipy.org/doc/scipy/reference/stats.html


# ts
- Implement general Aggregator class


# process
- next()
- trend()
- noise()
- mean(power)
- correlation()
- Processes to add: https://en.wikipedia.org/wiki/Stochastic_process
- Brown
- Wiener
- Orstein-Uhlenbeck
- Gaussian
- Galton-Watson


# mc
- slice sampling
- hmc
- rejection sampling with log-concave dist
- slice sampling
- Gibbs sampling
- NUTS
- adaptive Metropolis
- Hamiltonian
- Adjust Euclidean metric from covariance in burn-in
- step size sampled randomly
- inspiration: https://github.com/chi-feng/mcmc-demo


# add tags to distributions
- discrete/continuous
- bounded/unbounded
- exponential


# transform distributions
- add Transform class that transforms a distribution


# special functions
- list: https://www.boost.org/doc/libs/1_77_0/libs/math/doc/html/special.html
